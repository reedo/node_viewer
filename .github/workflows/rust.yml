on: [ pull_request, workflow_dispatch ]

name: CI

env:
    RUSTFLAGS: -D warnings
    RUSTDOCFLAGS: -D warnings

jobs:
    check_native:
        name: Check [x86_64]
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v4
            -   uses: actions-rs/toolchain@v1
                with:
                    profile: minimal
                    toolchain: stable
                    target: x86_64-pc-windows-msvc
                    override: true
            -   uses: actions-rs/cargo@v1
                with:
                    command: check
                    args: --all-features --lib --target x86_64-pc-windows-msvc

    check_wasm:
        name: Check [wasm32]
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v4
            -   uses: actions-rs/toolchain@v1
                with:
                    profile: minimal
                    toolchain: stable
                    target: wasm32-unknown-unknown
                    override: true
            -   uses: actions-rs/cargo@v1
                with:
                    command: check
                    args: --all-features --lib --target wasm32-unknown-unknown

    test_native:
        name: Test Suite [x86_64]
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v4
            -   uses: actions-rs/toolchain@v1
                with:
                    profile: minimal
                    toolchain: stable
                    target: x86_64-pc-windows-msvc
                    override: true
            -   run: sudo apt-get install libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev
            -   uses: actions-rs/cargo@v1
                with:
                    command: test
                    args: --lib --target x86_64-pc-windows-msvc

    test_wasm:
        name: Test Suite [wasm32]
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v4
            -   uses: actions-rs/toolchain@v1
                with:
                    profile: minimal
                    toolchain: stable
                    target: wasm32-unknown-unknown
                    override: true
            -   run: sudo apt-get install libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev
            -   uses: actions-rs/cargo@v1
                with:
                    command: test
                    args: --lib --target wasm32-unknown-unknown

    fmt_native:
        name: Rustfmt [x86_64]
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v4
            -   uses: actions-rs/toolchain@v1
                with:
                    profile: minimal
                    toolchain: stable
                    target: x86_64-pc-windows-msvc
                    override: true
                    components: rustfmt
            -   uses: actions-rs/cargo@v1
                with:
                    command: fmt
                    args: --all --target x86_64-pc-windows-msvc -- --check

    fmt_wasm:
        name: Rustfmt [wasm32]
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v4
            -   uses: actions-rs/toolchain@v1
                with:
                    profile: minimal
                    toolchain: stable
                    target: wasm32-unknown-unknown
                    override: true
                    components: rustfmt
            -   uses: actions-rs/cargo@v1
                with:
                    command: fmt
                    args: --all --target wasm32-unknown-unknown -- --check

    #    clippy_native:
    #        name: Clippy [x86_64]
    #        runs-on: ubuntu-latest
    #        steps:
    #            -   uses: actions/checkout@v4
    #            -   uses: actions-rs/toolchain@v1
    #                with:
    #                    profile: minimal
    #                    toolchain: stable
    #                    target: x86_64-pc-windows-msvc
    #                    override: true
    #                    components: clippy
    #            -   uses: actions-rs/cargo@v1
    #                with:
    #                    command: clippy
    #                    args: -- -D warnings
    #
    #    clippy_wasm:
    #        name: Clippy [wasm32]
    #        runs-on: ubuntu-latest
    #        steps:
    #            -   uses: actions/checkout@v4
    #            -   uses: actions-rs/toolchain@v1
    #                with:
    #                    profile: minimal
    #                    toolchain: stable
    #                    target: wasm32-unknown-unknown
    #                    override: true
    #                    components: clippy
    #            -   uses: actions-rs/cargo@v1
    #                with:
    #                    command: clippy
    #                    args: -- -D warnings

    trunk:
        name: trunk [wasm32]
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v4
            -   uses: actions-rs/toolchain@v1
                with:
                    profile: minimal
                    toolchain: stable
                    target: wasm32-unknown-unknown
                    override: true
            -   name: Download and install Trunk binary
                run: wget -qO- https://github.com/thedodd/trunk/releases/latest/download/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-
            -   name: Build
                run: ./trunk build

#  build:
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        include:
#        - os: macos-latest
#          TARGET: aarch64-apple-darwin

#        - os: ubuntu-latest
#          TARGET: aarch64-unknown-linux-gnu

#        - os: ubuntu-latest
#          TARGET: armv7-unknown-linux-gnueabihf

#        - os: ubuntu-latest
#          TARGET: x86_64-unknown-linux-gnu

#        - os: windows-latest
#          TARGET: x86_64-pc-windows-msvc
#          EXTENSION: .exe

#    steps:
#    - name: Building ${{ matrix.TARGET }}
#      run: echo "${{ matrix.TARGET }}"
#
#    - uses: actions/checkout@master
#    - name: Install build dependencies - Rustup
#      run: |
#        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain stable --profile default --target ${{ matrix.TARGET }} -y
#        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
#
#    # For linux, it's necessary to use cross from the git repository to avoid glibc problems
#    # Ref: https://github.com/cross-rs/cross/issues/1510
#    - name: Install cross for linux
#      if: contains(matrix.TARGET, 'linux')
#      run: |
#        cargo install cross --git https://github.com/cross-rs/cross --rev 1b8cf50d20180c1a394099e608141480f934b7f7
#
#    - name: Install cross for mac and windows
#      if: ${{ !contains(matrix.TARGET, 'linux') }}
#      run: |
#        cargo install cross
#
#    - name: Build
#      run: |
#        cross build --verbose --release --target=${{ matrix.TARGET }}
#
#    - name: Rename
#      run: cp target/${{ matrix.TARGET }}/release/eframe_template${{ matrix.EXTENSION }} eframe_template-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
#
#    - uses: actions/upload-artifact@master
#      with:
#        name: eframe_template-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
#        path: eframe_template-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
#
#    - uses: svenstaro/upload-release-action@v2
#      name: Upload binaries to release
#      if: ${{ github.event_name == 'push' }}
#      with:
#        repo_token: ${{ secrets.GITHUB_TOKEN }}
#        file: eframe_template-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
#        asset_name: eframe_template-${{ matrix.TARGET }}${{ matrix.EXTENSION }}
#        tag: ${{ github.ref }}
#        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
#        overwrite: true
